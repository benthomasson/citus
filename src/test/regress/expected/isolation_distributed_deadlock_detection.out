Parsed test spec with 6 sessions

starting permutation: s1-begin s2-begin s1-update-1 s2-update-2 s2-update-1 s1-update-2 s1-finish s2-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s2-update-1: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 1;
 <waiting ...>
step s1-update-2: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 2;
 <waiting ...>
step s1-update-2: <... completed>
step s2-update-1: <... completed>
error in steps s1-update-2 s2-update-1: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s1-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s1-update-1 s2-update-2 s3-update-3 s1-update-2 s2-update-3 s3-update-1 s3-finish s2-finish s1-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;

step s1-update-2: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 2;
 <waiting ...>
step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;
 <waiting ...>
step s3-update-1: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 1;
 <waiting ...>
step s3-update-1: <... completed>
step s2-update-3: <... completed>
error in steps s3-update-1 s2-update-3: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s3-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

step s1-update-2: <... completed>
step s1-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s2-update-1 s1-update-1 s2-update-2 s3-update-3 s3-update-2 s2-update-3 s3-finish s2-finish s1-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s2-update-1: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 1;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;
 <waiting ...>
step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;
 <waiting ...>
step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;
 <waiting ...>
step s3-update-2: <... completed>
step s2-update-3: <... completed>
error in steps s3-update-2 s2-update-3: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s3-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

step s1-update-1: <... completed>
step s1-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s1-update-1 s2-update-2 s3-update-3 s3-update-2 s4-update-4 s2-update-3 s3-finish s2-finish s1-finish s4-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;
 <waiting ...>
step s4-update-4: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 4;

step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;
 <waiting ...>
step s3-update-2: <... completed>
step s2-update-3: <... completed>
error in steps s3-update-2 s2-update-3: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s3-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

step s1-finish: 
  COMMIT;

step s4-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s4-update-1 s1-update-1 s2-update-2 s3-update-3 s2-update-3 s3-update-2 s3-finish s2-finish s4-finish s1-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s4-update-1: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 1;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;
 <waiting ...>
step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;

step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;
 <waiting ...>
step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;
 <waiting ...>
step s3-update-2: <... completed>
step s2-update-3: <... completed>
error in steps s3-update-2 s2-update-3: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s3-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

step s4-finish: 
  COMMIT;

step s1-update-1: <... completed>
step s1-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s1-update-1 s4-update-4 s2-update-2 s3-update-3 s3-update-2 s4-update-1 s1-update-4 s1-finish s4-finish s2-update-3 s2-finish s3-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;

step s4-update-4: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 4;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;

step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;
 <waiting ...>
step s4-update-1: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 1;
 <waiting ...>
step s1-update-4: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 4;
 <waiting ...>
step s1-update-4: <... completed>
step s4-update-1: <... completed>
error in steps s1-update-4 s4-update-1: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s1-finish: 
  COMMIT;

step s4-finish: 
  COMMIT;

step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;
 <waiting ...>
step s2-update-3: <... completed>
step s3-update-2: <... completed>
error in steps s2-update-3 s3-update-2: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s2-finish: 
  COMMIT;

step s3-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s5-begin s6-begin s1-update-1 s5-update-5 s3-update-2 s2-update-3 s4-update-4 s3-update-4 s6-update-6 s4-update-6 s1-update-5 s5-update-1 s5-finish s1-finish s6-finish s4-finish s3-finish s2-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s5-begin: 
  BEGIN;

step s6-begin: 
  BEGIN;

step s1-update-1: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 1;

step s5-update-5: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 5;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;

step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;

step s4-update-4: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 4;

step s3-update-4: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 4;
 <waiting ...>
step s6-update-6: 
  UPDATE deadlock_detection_test SET some_val = 6 WHERE user_id = 6;

step s4-update-6: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 6;
 <waiting ...>
step s1-update-5: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 5;
 <waiting ...>
step s5-update-1: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 1;
 <waiting ...>
step s5-update-1: <... completed>
step s1-update-5: <... completed>
error in steps s5-update-1 s1-update-5: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s5-finish: 
  COMMIT;

step s1-finish: 
  COMMIT;

step s6-finish: 
  COMMIT;

step s4-update-6: <... completed>
step s4-finish: 
  COMMIT;

step s3-update-4: <... completed>
step s3-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s5-begin s6-begin s6-update-6 s5-update-5 s5-update-6 s4-update-4 s1-update-4 s4-update-5 s2-update-3 s3-update-2 s2-update-2 s3-update-3 s6-finish s5-finish s4-finish s1-finish s2-finish s3-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s5-begin: 
  BEGIN;

step s6-begin: 
  BEGIN;

step s6-update-6: 
  UPDATE deadlock_detection_test SET some_val = 6 WHERE user_id = 6;

step s5-update-5: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 5;

step s5-update-6: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 6;
 <waiting ...>
step s4-update-4: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 4;

step s1-update-4: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 4;
 <waiting ...>
step s4-update-5: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 5;
 <waiting ...>
step s2-update-3: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 3;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;
 <waiting ...>
step s3-update-3: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 3;
 <waiting ...>
step s6-finish: 
  COMMIT;

step s5-update-6: <... completed>
step s5-finish: 
  COMMIT;

step s4-update-5: <... completed>
step s4-finish: 
  COMMIT;

step s1-update-4: <... completed>
step s1-finish: 
  COMMIT;

step s2-update-2: <... completed>
step s3-update-3: <... completed>
error in steps s2-update-2 s3-update-3: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s2-finish: 
  COMMIT;

step s3-finish: 
  COMMIT;

restore_isolation_tester_func

               

starting permutation: s1-begin s2-begin s3-begin s4-begin s5-begin s6-begin s5-update-5 s3-update-2 s2-update-2 s4-update-4 s3-update-4 s4-update-5 s1-update-4 s6-update-6 s5-update-6 s6-update-5 s6-finish s5-finish s4-finish s3-finish s1-finish s2-finish
step s1-begin: 
  BEGIN;

step s2-begin: 
  BEGIN;

step s3-begin: 
  BEGIN;

step s4-begin: 
  BEGIN;

step s5-begin: 
  BEGIN;

step s6-begin: 
  BEGIN;

step s5-update-5: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 5;

step s3-update-2: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 2;

step s2-update-2: 
  UPDATE deadlock_detection_test SET some_val = 2 WHERE user_id = 2;
 <waiting ...>
step s4-update-4: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 4;

step s3-update-4: 
  UPDATE deadlock_detection_test SET some_val = 3 WHERE user_id = 4;
 <waiting ...>
step s4-update-5: 
  UPDATE deadlock_detection_test SET some_val = 4 WHERE user_id = 5;
 <waiting ...>
step s1-update-4: 
  UPDATE deadlock_detection_test SET some_val = 1 WHERE user_id = 4;
 <waiting ...>
step s6-update-6: 
  UPDATE deadlock_detection_test SET some_val = 6 WHERE user_id = 6;

step s5-update-6: 
  UPDATE deadlock_detection_test SET some_val = 5 WHERE user_id = 6;
 <waiting ...>
step s6-update-5: 
  UPDATE deadlock_detection_test SET some_val = 6 WHERE user_id = 5;
 <waiting ...>
step s6-update-5: <... completed>
step s5-update-6: <... completed>
error in steps s6-update-5 s5-update-6: ERROR:  distributed deadlock detected and to resolve the deadlock this backend is cancelled
step s6-finish: 
  COMMIT;

step s5-finish: 
  COMMIT;

step s4-update-5: <... completed>
step s4-finish: 
  COMMIT;

step s3-update-4: <... completed>
step s3-finish: 
  COMMIT;

step s2-update-2: <... completed>
step s1-update-4: <... completed>
step s1-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

restore_isolation_tester_func

               
