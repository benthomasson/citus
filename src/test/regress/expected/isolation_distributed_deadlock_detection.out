Parsed test spec with 3 sessions

starting permutation: s1-set-deadlock-prevention s2-set-deadlock-prevention s1-update-1 s2-update-2 s2-update-1 s1-update-2 s3-check-deadlock s1-finish s2-finish
step s1-set-deadlock-prevention: 
	SET citus.enable_deadlock_prevention TO off;
	
    -- we don't want Postgres deadlock detection to kick in
    SET deadlock_timeout TO '20min';

step s2-set-deadlock-prevention: 
	SET citus.enable_deadlock_prevention TO off;

    -- we don't want Postgres deadlock detection to kick in
    SET deadlock_timeout TO '20min';

step s1-update-1: 
  BEGIN;
  UPDATE deadlock_detection_test SET some_val = 15 WHERE user_id = 1;

step s2-update-2: 
  BEGIN;
  UPDATE deadlock_detection_test SET some_val = 15 WHERE user_id = 2;

step s2-update-1: 
  UPDATE deadlock_detection_test SET some_val = 15 WHERE user_id = 1;
 <waiting ...>
step s1-update-2: 
  UPDATE deadlock_detection_test SET some_val = 15 WHERE user_id = 2;
 <waiting ...>
step s3-check-deadlock: 
	SELECT check_distributed_deadlocks();

check_distributed_deadlocks

t              
step s2-update-1: <... completed>
step s1-update-2: <... completed>
error in steps s3-check-deadlock s2-update-1 s1-update-2: ERROR:  canceling statement due to user request
step s1-finish: 
  COMMIT;

step s2-finish: 
  COMMIT;

restore_isolation_tester_func

               
